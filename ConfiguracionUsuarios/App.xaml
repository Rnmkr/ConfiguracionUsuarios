<Application x:Class="ConfiguracionUsuarios.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ConfiguracionUsuarios"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!--#region DataGrid-->
        <Style x:Name="MainDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Height" Value="Auto" />
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="SelectionUnit" Value="FullRow"/>
            <Setter Property="HorizontalGridLinesBrush" Value="#FFA9D1F4"/>
            <Setter Property="GridLinesVisibility" Value="Horizontal"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="ColumnHeaderHeight" Value="39"/>
            <Setter Property="IsSynchronizedWithCurrentItem" Value="False"/>
            <Setter Property="EnableColumnVirtualization" Value="True"/>
            <Setter Property="CanUserAddRows" Value="False"/>
            <Setter Property="CanUserDeleteRows" Value="False"/>
            <Setter Property="CanUserReorderColumns" Value="False"/>
            <Setter Property="CanUserResizeColumns" Value="False"/>
            <Setter Property="CanUserResizeRows" Value="False"/>
            <Setter Property="CanUserSortColumns" Value="False"/>
            <Setter Property="AutoGenerateColumns" Value="False"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="SelectionMode" Value="Extended"/>
            <Setter Property="EnableRowVirtualization" Value="True"/>
            <Setter Property="FontFamily" Value="Consolas"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="MinRowHeight" Value="28"/>
            <Setter Property="RowHeaderWidth" Value="0"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <ScrollContentPresenter Margin="0,0,17,0" x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                            <ScrollBar Margin="-17,0,0,0" x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column="1" Grid.Row="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="AlternationIndex" Value="0">
                    <Setter Property="Background" Value="{x:Null}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{x:Null}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{x:Null}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--#endregion-->

        <!--#region  DataGrid Column Header-->
        <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="FontFamily" Value="Consolas"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Background" Value="#2C3E50"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="ContextMenu" Value="{x:Null}"/>
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="BorderBrush" Value="#2C3E50" />
            <Setter Property="Foreground" Value="#ECF0F1" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Padding" Value="5,0,0,0"/>
            <Setter Property="Margin" Value="0,1,0,1"/>
        </Style>
        <!--#endregion-->

        <!--#region DataGrid Row-->
        <Style x:Key="DataGridRowZebra" TargetType="{x:Type DataGridRow}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Background" Value="#FFE6E6E6"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="ContextMenu" Value="{x:Null}"/>
            <!--<Setter Property="Margin" Value="1,0,0,0"/>-->
            <Style.Triggers>
                <Trigger Property="AlternationIndex" Value="1">
                    <Setter Property="Background" Value="{x:Null}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="LightYellow"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{x:Null}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--#endregion-->

        <!--#region DataGrid Cell-->
        <Style x:Key="DataGridCellCentrada" TargetType="{x:Type DataGridCell}">
            <Setter Property="TextBlock.TextAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="3,0,0,0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
        
        

        <!--#region Rounded Button 48-->

        <Style x:Key ="roundButtonTemplate48" TargetType ="{x:Type Button}">
            <Setter Property ="Foreground" Value ="Black"/>
            <Setter Property ="FontWeight" Value ="Bold"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type Button}">
                        <Grid>
                            <Ellipse Name ="OuterRing" Width ="50" Height ="50" Fill ="Transparent"/>
                            <Ellipse Name ="InnerRing" Width ="48" Height ="48" Fill ="#CC4452"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsMouseOver" Value ="True">
                                <Setter TargetName ="OuterRing" Property ="Fill" Value ="LightCyan"/>
                            </Trigger>
                            <Trigger Property ="IsPressed" Value ="True">
                                <Setter TargetName="OuterRing" Property="Fill" Value="Cyan"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#region Rounded Button Add(Green InnerRing)-->

        <Style x:Key ="roundButtonTemplateGreen" TargetType ="{x:Type Button}" BasedOn="{StaticResource roundButtonTemplate48}">
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type Button}">
                        <Grid>
                            <Ellipse Name ="OuterRing" Width ="50" Height ="50" Fill ="Transparent"/>
                            <Ellipse Name ="InnerRing" Width ="48" Height ="48" Fill ="#468966"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsMouseOver" Value ="True">
                                <Setter TargetName ="OuterRing" Property ="Fill" Value ="LightCyan"/>
                            </Trigger>
                            <Trigger Property ="IsPressed" Value ="True">
                                <Setter TargetName="OuterRing" Property="Fill" Value="Cyan"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->

        <!--#region Rounded Button 32-->

        <Style x:Key ="roundButtonTemplate32" TargetType ="{x:Type Button}">
            <Setter Property ="Foreground" Value ="Black"/>
            <Setter Property ="FontWeight" Value ="Bold"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type Button}">
                        <Grid>
                            <Ellipse Name ="OuterRing" Width ="34" Height ="34" Fill ="Transparent"/>
                            <Ellipse Name ="InnerRing" Width ="32" Height ="32" Fill ="#CC4452"/>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsMouseOver" Value ="True">
                                <Setter TargetName ="OuterRing" Property ="Fill" Value ="LightCyan"/>
                            </Trigger>
                            <Trigger Property ="IsPressed" Value ="True">
                                <Setter TargetName="OuterRing" Property="Fill" Value="Cyan"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->
    </Application.Resources>
</Application>
